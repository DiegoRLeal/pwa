{"version":3,"file":"sw-25ddd3babcb7061d5b23.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/service_workers/sw.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/service_workers/sw.js\");\n","const OFFLINE_VERSION = 1;\nconst CACHE_NAME = `offline V${OFFLINE_VERSION}`;\nconst OFFLINE_URL = 'offline';\nconst OFFLINE_IMG = 'apple-icon.png';\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nself.addEventListener('install', function(event) {\n  console.log('Service Worker installing.');\n  self.skipWaiting();\n  event.waitUntil((async () => {\n    const cache = await caches.open(CACHE_NAME);\n    // Setting {cache: 'reload'} in the new request will ensure that the response\n    // isn't fulfilled from the HTTP cache; i.e., it will be from the network.\n    // here the offline url and image are stored in the cache\n   await Promise.all([OFFLINE_URL, OFFLINE_IMG].map((path) => {\n      cache.add(new Request(path, {cache: 'reload'}));\n    }));\n  })());\n});\n\nself.addEventListener('activate', async function(event) {\n  console.log('Service Worker activated.');\n\n  // // Tell the active service worker to take control of the page immediately.\n  self.clients.claim();\n\n  let cacheWhitelist = [CACHE_NAME];\n  event.waitUntil((async () => {\n    // Enable navigation preload if it's supported.\n    // See https://developers.google.com/web/updates/2017/02/navigation-preload\n    if ('navigationPreload' in self.registration) {\n      await self.registration.navigationPreload.enable();\n    }\n\n    // Delete old versions of CACHE_NAME\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  })());\n\n  try {\n    const applicationServerKey = urlB64ToUint8Array('BBY3RqHYcUn-O13IGlLQq-Mh7_KTASUo5KJAkKi6VrreZdtEPYxCcljzatxERXooPIed32p6dB_7NnKZb3QBG58')\n    const options = { applicationServerKey, userVisibleOnly: true }\n    const subscription = await self.registration.pushManager.subscribe(options)\n    console.log(JSON.stringify(subscription))\n  } catch (err) {\n    console.log('Error', err)\n  }\n});\n\nself.addEventListener('fetch', function(event) {\n  console.log('Service Worker fetching.');\n  // We only want to call event.respondWith() if this is a navigation request\n  // for an HTML page.\n  event.respondWith((async () => {\n    try {\n      // First, try to use the navigation preload response if it's supported.\n      const preloadResponse = await event.preloadResponse;\n      if (preloadResponse) {\n        return preloadResponse;\n      }\n\n      return await caches.match(event.request) || await fetch(event.request);\n    } catch (error) {\n      // catch is only triggered if an exception is thrown, which is likely\n      // due to a network error.\n      // If fetch() returns a valid HTTP response with a response code in\n      // the 4xx or 5xx range, the catch() will NOT be called.\n      console.log('Fetch failed; returning offline page instead.', error);\n\n      const cache = await caches.open(CACHE_NAME);\n      const cachedResponse = await cache.match(OFFLINE_URL);\n      return cachedResponse;\n    }\n  })());\n});\n\n// for the notification push\nself.addEventListener('push', function(event) {\n  console.log('[Service Worker] Push Received.');\n  console.log(`[Service Worker] Push had this data: \"${event.data.text()}\"`);\n\n  const title = 'Notification from PWA-test app';\n  const options = {\n    body: event.data.text(),\n    icon: OFFLINE_IMG,\n    badge: OFFLINE_IMG\n  };\n\n  event.waitUntil(self.registration.showNotification(title, options));\n});\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjFA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}